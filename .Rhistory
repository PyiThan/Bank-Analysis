library(ggplot2)
library(dplyr)
Bank=read.csv("~/Desktop/SFSU/math449Project/bank.csv",header=TRUE,sep=";")
attach(Bank)
# Graph 5
educationCounts=table(Bank$education,Bank$y)
educationCounts
education_counts_df <- as.data.frame(educationCounts)
colnames(education_counts_df) <- c("education", "count", "y")
# Calculate the proportions within each education category
education_counts_df <- within(education_counts_df, {
prop <- count / sum(count)
})
education_counts_df
educationCounts
str(education_counts_df)
# Graph 5
educationCounts=table(Bank$education,Bank$y)
# Convert the summary table to a data frame
education_counts_df <- as.data.frame(educationCounts,stringsAsFactors = FALSE)
colnames(education_counts_df) <- c("education", "count", "y")
education_counts_df
str(education_counts_df)
pie_chart <- ggplot(education_counts_df, aes(x = "", y = count, fill = y)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
labs(title = "Distribution of Subscribers and Non-Subscribers by Education",
fill = "Subscription Status") +
theme_minimal()
pie_chart <- ggplot(education_counts_df, aes(x = "", y = count, fill = y)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
labs(title = "Distribution of Subscribers and Non-Subscribers by Education",
fill = "Subscription Status") +
theme_minimal()
pie_chart
Bank
subscribersCount=table(Bank$y)
subscribersCount
subscribersCount=table(Bank$y)[1]
subscribersCount
subscribersCount=table(Bank$y)[2]
subscribersCount
nonSubscribersCount=table(Bank$y)[1]
nonSubscribersCount
totalCount=nrow(Bank)
totalCount
subscribersCount=table(Bank$y)[2]
subscribersCount
nonSubscribersCount=table(Bank$y)[1]
nonSubscribersCount
totalCount=nrow(Bank)
totalCount
# Calculate the percentages
subscriber_percentage <- subscribersCount / totalCount * 100
nonSubscriber_percentage <- nonSubscribersCount / totalCount * 100
# Create a data frame with the percentages
percentage_data <- data.frame(
Status = c("Subscribers", "Non-Subscribers"),
Percentage = c(subscriber_percentage, nonSubscriber_percentage)
)
# Create the pie chart
pie(percentage_data$Percentage, labels = paste(percentage_data$Status, "-", round(percentage_data$Percentage, 2), "%"),
col = c("blue", "red"), main = "Percentage Distribution of Subscribers and Non-Subscribers")
subscribersCount=table(Bank$y)[2]
subscribersCount
nonSubscribersCount=table(Bank$y)[1]
nonSubscribersCount
totalCount=nrow(Bank)
totalCount
# Set the width and height of the plot
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", xlim = c(-1, 1), ylim = c(-1, 1), xlab = "", ylab = "")
# Calculate the percentages
subscriber_percentage <- subscribersCount / totalCount * 100
nonSubscriber_percentage <- nonSubscribersCount / totalCount * 100
# Create a data frame with the percentages
percentage_data <- data.frame(
Status = c("Subscribers", "Non-Subscribers"),
Percentage = c(subscriber_percentage, nonSubscriber_percentage)
)
# Create the pie chart
pie(percentage_data$Percentage, labels = paste(percentage_data$Status, "-", round(percentage_data$Percentage, 2), "%"),
col = c("blue", "red"), main = "Percentage Distribution of Subscribers and Non-Subscribers")
library(ggplot2)
library(dplyr)
Bank=read.csv("~/Desktop/SFSU/math449Project/bank.csv",header=TRUE,sep=";")
attach(Bank)
totalCustomers=summarize(count=n())
totalCustomers=nrow(Bank)
totalCustomers
dim(totalCustomers)
dim(Bank)
install.packages("shiny")
head(Bank)
ui <- fluidPage(
titlePanel("Simple Dashboard"),
sidebarLayout(
sidebarPanel(
# Add inputs or controls here
selectInput("dataset", "Select dataset:", choices = c("Plot", "Table"))
),
mainPanel(
# Add outputs or plots here
conditionalPanel(
condition = "input.dataset == 'Plot'",
plotOutput("plot")
),
conditionalPanel(
condition = "input.dataset == 'Table'",
tableOutput("table")
)
)
)
)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Simple Dashboard"),
sidebarLayout(
sidebarPanel(
# Add inputs or controls here
selectInput("dataset", "Select dataset:", choices = c("Plot", "Table"))
),
mainPanel(
# Add outputs or plots here
conditionalPanel(
condition = "input.dataset == 'Plot'",
plotOutput("plot")
),
conditionalPanel(
condition = "input.dataset == 'Table'",
tableOutput("table")
)
)
)
)
# Define server logic
server <- function(input, output) {
# Perform calculations and generate output based on inputs
output$plot <- renderPlot({
# Generate plot based on selected dataset
if (input$dataset == "Plot") {
# Plot for Dataset 1
plot(Bank$age, Bank$balance, main = "Age vs Balance")
}
})
output$table <- renderTable({
# Return the data frame
if (input$dataset == "Table") {
data1
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Simple Dashboard"),
sidebarLayout(
sidebarPanel(
# Add inputs or controls here
selectInput("dataset", "Select dataset:", choices = c("Graph 1", "Graph 2", "Graph 3", "Graph 4", "Graph 5", "Table 1", "Table 2", "Table 3", "Table 4", "Table 5"))
),
mainPanel(
# Add outputs or plots here
conditionalPanel(
condition = "input.dataset %in% c('Graph 1', 'Graph 2', 'Graph 3', 'Graph 4', 'Graph 5')",
plotOutput("plot")
),
conditionalPanel(
condition = "input.dataset %in% c('Table 1', 'Table 2', 'Table 3', 'Table 4', 'Table 5')",
tableOutput("table")
)
)
)
)
# Define server logic
server <- function(input, output) {
# Perform calculations and generate output based on inputs
output$plot <- renderPlot({
# Generate plot based on selected dataset
if (input$dataset == "Graph 1") {
# Plot 1
plot(Bank$age, Bank$balance, main = "Age vs Balance")
} else if (input$dataset == "Graph 2") {
# Plot 2
plot(Bank$education, Bank$balance, main = "Education vs Balance")
} else if (input$dataset == "Graph 3") {
# Plot 3
plot(Bank$job, Bank$balance, main = "Job vs Balance")
} else if (input$dataset == "Graph 4") {
# Plot 4
plot(Bank$marital, Bank$balance, main = "Marital Status vs Balance")
} else if (input$dataset == "Graph 5") {
# Plot 5
plot(Bank$month, Bank$balance, main = "Month vs Balance")
}
})
output$table <- renderTable({
# Generate table based on selected dataset
if (input$dataset == "Table 1") {
# Table 1
Bank[1:5, ]
} else if (input$dataset == "Table 2") {
# Table 2
Bank[6:10, ]
} else if (input$dataset == "Table 3") {
# Table 3
Bank[11:15, ]
} else if (input$dataset == "Table 4") {
# Table 4
Bank[16:20, ]
} else if (input$dataset == "Table 5") {
# Table 5
Bank[21:25, ]
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Simple Dashboard"),
sidebarLayout(
sidebarPanel(
# Add inputs or controls here
),
mainPanel(
# Add outputs or plots here
tabsetPanel(
tabPanel("Graphs",
plotOutput("graph1"),
plotOutput("graph2"),
plotOutput("graph3"),
plotOutput("graph4"),
plotOutput("graph5")
),
tabPanel("Tables",
tableOutput("table1"),
tableOutput("table2"),
tableOutput("table3"),
tableOutput("table4"),
tableOutput("table5")
)
)
)
)
)
# Define server logic
server <- function(input, output) {
# Perform calculations and generate output
# Graph 1
output$graph1 <- renderPlot({
plot(Bank$age, Bank$balance, main = "Age vs Balance")
})
# Graph 2
output$graph2 <- renderPlot({
plot(Bank$education, Bank$balance, main = "Education vs Balance")
})
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Simple Dashboard"),
sidebarLayout(
sidebarPanel(
# Add inputs or controls here
),
mainPanel(
# Add outputs or plots here
tabsetPanel(
tabPanel("Graphs",
plotOutput("graph1"),
plotOutput("graph2"),
plotOutput("graph3"),
plotOutput("graph4"),
plotOutput("graph5")
),
tabPanel("Tables",
tableOutput("table1"),
tableOutput("table2"),
tableOutput("table3"),
tableOutput("table4"),
tableOutput("table5")
)
)
)
)
)
# Define server logic
server <- function(input, output) {
# Perform calculations and generate output
# Graph 1
output$graph1 <- renderPlot({
plot(Bank$age, Bank$balance, main = "Age vs Balance")
})
# Graph 2
output$graph2 <- renderPlot({
plot(Bank$education, Bank$balance, main = "Education vs Balance")
})
# Graph 3
output$graph3 <- renderPlot({
plot(Bank$job, Bank$balance, main = "Job vs Balance")
})
# Graph 4
output$graph4 <- renderPlot({
plot(Bank$marital, Bank$balance, main = "Marital Status vs Balance")
})
# Graph 5
output$graph5 <- renderPlot({
plot(Bank$month, Bank$balance, main = "Month vs Balance")
})
# Table 1
output$table1 <- renderTable({
Bank[1:5, ]
})
# Table 2
output$table2 <- renderTable({
Bank[6:10, ]
})
# Table 3
output$table3 <- renderTable({
Bank[11:15, ]
})
# Table 4
output$table4 <- renderTable({
Bank[16:20, ]
})
# Table 5
output$table5 <- renderTable({
Bank[21:25, ]
})
}
# Run the application
shinyApp(ui = ui, server = server)
)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Simple Dashboard"),
sidebarLayout(
sidebarPanel(
# Add inputs or controls here
),
mainPanel(
# Add outputs or plots here
tabsetPanel(
tabPanel("Graphs",
plotOutput("graph1"),
plotOutput("graph2"),
plotOutput("graph3"),
plotOutput("graph4"),
plotOutput("graph5")
),
tabPanel("Tables",
tableOutput("table1"),
tableOutput("table2"),
tableOutput("table3"),
tableOutput("table4"),
tableOutput("table5")
)
)
)
)
)
# Define server logic
server <- function(input, output) {
# Perform calculations and generate output
# Graph 1
output$graph1 <- renderPlot({
plot(Bank$age, Bank$balance, main = "Age vs Balance")
})
# Graph 2
output$graph2 <- renderPlot({
plot(Bank$education, Bank$balance, main = "Education vs Balance")
})
# Graph 3
output$graph3 <- renderPlot({
plot(Bank$job, Bank$balance, main = "Job vs Balance")
})
# Graph 4
output$graph4 <- renderPlot({
plot(Bank$marital, Bank$balance, main = "Marital Status vs Balance")
})
# Graph 5
output$graph5 <- renderPlot({
plot(Bank$month, Bank$balance, main = "Month vs Balance")
})
# Table 1
output$table1 <- renderTable({
Bank[1:5, ]
})
# Table 2
output$table2 <- renderTable({
Bank[6:10, ]
})
# Table 3
output$table3 <- renderTable({
Bank[11:15, ]
})
# Table 4
output$table4 <- renderTable({
Bank[16:20, ]
})
# Table 5
output$table5 <- renderTable({
Bank[21:25, ]
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("pdftools")
pdf_convert("~/Desktop/SFSU/Bank-Analysis/Bank Analysis.pdf", output = "~/Desktop/SFSU/Bank-Analysis/Bank Analysis..html", format = "html")
library(pdftools)
pdf_convert("~/Desktop/SFSU/Bank-Analysis/Bank Analysis.pdf", output = "~/Desktop/SFSU/Bank-Analysis/Bank Analysis..html", format = "html")
pdf_convert("~/Desktop/SFSU/Bank-Analysis/Bank Analysis.pdf", output = "~/Desktop/SFSU/Bank-Analysis/Bank Analysis.html", format = "html")
pdf_convert("~/Desktop/SFSU/Bank-Analysis/Bank Analysis.pdf", output = "~/Desktop/SFSU/Bank-Analysis/Bank Analysis.html", format = "html")
pdf_convert("~/Desktop/SFSU/Bank-Analysis/Bank Analysis.pdf", output = "Bank Analysis.html", format = "html")
pdf_convert("~/Desktop/SFSU/Bank-Analysis/Bank Analysis.pdf", format = "html")
install.packages("pdftohtmlr")
install.packages("pdf2html")
install.packages("tabulizer")
